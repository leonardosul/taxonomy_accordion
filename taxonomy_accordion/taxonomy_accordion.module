<?php

/**
 * @file
 * Provide block for each vocabulary listing Taxonomy terms with hierarchy in
 *  a javascript accordion.
 */

/**
 * Implements hook_permission().
 */
function taxonomy_accordion_permission() {
  return array(
    'access taxonomy accordion blocks' => array(
      'title' => t('Access Taxonomy Accordion blocks'),
      'description' => t('View blocks generated by the Taxonomy Accordion module.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function taxonomy_accordion_block_info() {
  // Bring in a list of all Taxonomy Vocabularies.
  $vocabularies = taxonomy_get_vocabularies();
  $blocks = array();
  foreach ($vocabularies as $vid => $vocabulary) {
    $blocks[$vid] = array(
      'info' => t('Taxonomy Accordion block for @vocabulary',
        array('@vocabulary' => $vocabulary->name)),
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function taxonomy_accordion_block_view($delta = '') {
  // Grab the vocabulary from $delta.
  $tax_vocabulary = $delta;
  // Bring in a list of all Taxonomy Vocabularies.
  $vocabularies = taxonomy_get_vocabularies();
  // Get the name of this vocabulary.
  $vocabulary_name = $vocabularies[$tax_vocabulary]->name;
  // Grab all of the terms listed under this vocabulary.
  $terms = taxonomy_get_tree($tax_vocabulary, 0, 1, FALSE);
  // Initialise output, block and selector_list.
  $output = '<div id="taxonomy_accordion_' . $tax_vocabulary . '">';
  $selector_list = array();
  $block = array();

  foreach ($terms as $term) {
    // Grab children of each term.
    $term_children = taxonomy_get_tree($tax_vocabulary, $term->tid, NULL, FALSE);
    // Use a theme function to build the output.
    $output .= theme('taxonomy_accordion_item', array(
      'delta' => $tax_vocabulary,
      'term' => $term,
      'term_children' => $term_children
    ));

    // Create the selector for each accordion item to be sent to js.
    $selector = '#taxonomy_accordion_' . $tax_vocabulary . ' h3:containsExact("' . $term->name . '")';
    // Add selctors to an array.
    $selector_list[] = $selector;
  }

  // Close output div.
  $output .= "</div>";

  // Add ui accordion js.
  drupal_add_library('system', 'ui.accordion');
  // Add jquery cookie library.
  drupal_add_library('system', 'jquery.cookie');
  // Send the selectors to the js file as settings.
  drupal_add_js(array(
      'taxonomy_accordion' => array(
        'selector_list' => $selector_list
      )
    ),
    array('type' => 'setting'));

  // Add the js as a file.
  drupal_add_js(drupal_get_path('module', 'taxonomy_accordion') . '/tax_accordion.js');

  // Add the subject and content to the block array.
  $block['subject'] = $vocabulary_name;
  $block['content'] = $output;

  return $block;
}

/**
 * Implements hook_theme().
 */
function taxonomy_accordion_theme() {
  return array(
    'taxonomy_accordion_item' => array(
      'arguments' => array(
        'delta' => NULL,
        'term' => NULL,
        'term_children' => NULL
      ),
    ),
  );
}

/**
 * Function to assign H3 tags to top level terms and add child terms as links.
 */
function theme_taxonomy_accordion_item($arguments) {
  // Grab the arguments.
  $tax_items = $arguments;
  $links = array();
  // Grab the path for each parent term.
  $term_uri = taxonomy_term_uri($tax_items['term']);
  $term_path = $term_uri['path'];
  // Add the H3 tag to the top level terms.
  $output = '<h3>' . $tax_items['term']->name . '</h3>';
  // Open a div.
  $output .= "<div>";

  // Add a link to all terms listed under each top level term.
  $links[$tax_items['term']->tid] = array(
    'title' => t('All of @term', array('@term' => $arguments['term']->name)),
    'href' => $term_path,
  );
  // Create the links for all child terms.
  foreach ($tax_items['term_children'] as $child) {
    // Grab the path for each child term.
    $child_uri = taxonomy_term_uri($child);
    $child_path = $child_uri['path'];
    // Add each link to an array.
    $links[$child->tid] = array(
      'title' => $child->name,
      'href' => $child_path,
    );
  }

  // Theme the child links to appear as menu links.
  $output .= theme('links', array(
    'links' => $links,
    'attributes' => array('class' => array('links', 'menu'))
  ));
  // Close the output div.
  $output .= "</div>";

  return $output;
}
